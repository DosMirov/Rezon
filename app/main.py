import os
import logging
from dotenv import load_dotenv

from aiohttp import web
from aiogram import Bot, Dispatcher
from aiogram.enums.parse_mode import ParseMode
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

from app.bot import register_routers
from app.config import settings
from app.storage.db import init_db

load_dotenv()

# –í–µ–±—Ö—É–∫: –ø—É—Ç—å –∏ –ø—É–±–ª–∏—á–Ω—ã–π URL
WEBHOOK_PATH = f"/webhook/{settings.BOT_TOKEN}"
WEBHOOK_URL = f"{settings.BASE_WEBHOOK_URL}{WEBHOOK_PATH}"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

async def on_startup(app: web.Application):
    bot: Bot = app["bot"]
    logging.info(f"üì° Setting webhook to: {WEBHOOK_URL}")
    await bot.set_webhook(WEBHOOK_URL)

    logging.info("üóÉ Initializing SQLite...")
    await init_db(settings.DATABASE_PATH)
    logging.info("‚úÖ DB ready.")

async def on_shutdown(app: web.Application):
    bot: Bot = app["bot"]
    logging.info("‚ùå Removing webhook...")
    await bot.delete_webhook()

def create_app() -> web.Application:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=settings.BOT_TOKEN, parse_mode=ParseMode.HTML)
    dp = Dispatcher()
    register_routers(dp)

    # HTTP-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = web.Application()
    app["bot"] = bot

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º webhook endpoint
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)

    # –•—É–∫–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    return app

if __name__ == "__main__":
    # Render —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è $PORT
    port = int(os.environ.get("PORT", 8000))
    web.run_app(create_app(), host="0.0.0.0", port=port)